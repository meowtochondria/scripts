# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    export PROMPT_COMMAND=__prompt_command
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# Setup some colors
RESET_COLOR='\[\e[0m\]'  # Text Reset
# Regular                    Bold                          Underline                     High Intensity                BoldHigh Intensity
BLACK='\[\e[0;30m\]';  BLACK_BOLD='\[\e[1;30m\]';  BLACK_ULINE='\[\e[4;30m\]';     BLACK_INTENSE='\[\e[0;90m\]';    BLACK_BOLD_INTENSE='\[\e[1;90m\]';
RED='\[\e[0;31m\]';    RED_BOLD='\[\e[1;31m\]';    RED_ULINE='\[\e[4;31m\]';       RED_INTENSE='\[\e[0;91m\]';      RED_BOLD_INTENSE='\[\e[1;91m\]';
GREEN='\[\e[0;32m\]';  GREEN_BOLD='\[\e[1;32m\]';  GREEN_ULINE='\[\e[4;32m\]';     GREEN_INTENSE='\[\e[0;92m\]';    GREEN_BOLD_INTENSE='\[\e[1;92m\]';
YELLOW='\[\e[0;33m\]'; YELLOW_BOLD='\[\e[1;33m\]'; YELLOW_ULINE='\[\e[4;33m\]';    YELLOW_INTENSE='\[\e[0;93m\]';   YELLOW_BOLD_INTENSE='\[\e[1;93m\]';
BLUE='\[\e[0;34m\]';   BLUE_BOLD='\[\e[1;34m\]';   BLUE_ULINE='\[\e[4;34m\]';      BLUE_INTENSE='\[\e[0;94m\]';     BLUE_BOLD_INTENSE='\[\e[1;94m\]';
PURPLE='\[\e[0;35m\]'; PURPLE_BOLD='\[\e[1;35m\]'; PURPLE_ULINE='\[\e[4;35m\]';    PURPLE_INTENSE='\[\e[0;95m\]';   PURPLE_BOLD_INTENSE='\[\e[1;95m\]';
CYAN='\[\e[0;36m\]';   CYAN_BOLD='\[\e[1;36m\]';   CYAN_ULINE='\[\e[4;36m\]';      CYAN_INTENSE='\[\e[0;96m\]';     CYAN_BOLD_INTENSE='\[\e[1;96m\]';
WHITE='\[\e[0;37m\]';  WHITE_BOLD='\[\e[1;37m\]';  WHITE_ULINE='\[\e[4;37m\]';     WHITE_INTENSE='\[\e[0;97m\]';    WHITE_BOLD_INTENSE='\[\e[1;97m\]';

# Background        High Intensity Backgrounds
ON_BLACK='\e[40m';  ON_INTENSE_BLACK='\[\e[0;100m\]';
ON_RED='\e[41m';    ON_INSTENSE_RED='\[\e[0;101m\]';
ON_GREEN='\e[42m';  ON_INTENSE_GREEN='\[\e[0;102m\]';
ON_YELLOW='\e[43m'; ON_INTENSE_YELLOW='\[\e[0;103m\]';
ON_BLUE='\e[44m';   ON_INTENSE_BLUE='\[\e[0;104m\]';
ON_PURPLE='\e[45m'; ON_INTENSE_PURPLE='\[\e[0;105m\]';
ON_CYAN='\e[46m';   ON_INTENSE_CYAN='\[\e[0;106m\]';
ON_WHITE='\e[47m';  ON_INTENSE_WHITE='\[\e[0;107m\]';

function __prompt_command() {
    local exit_code="$?"
    local dir="📁 ${YELLOW_BOLD}\w${RESET_COLOR} "
    local exit_symbol="🔆"
    local jobs_in_bg=''
    local git_prompt=''

    # Background jobs
    if jobs %% &>/dev/null; then
        jobs_in_bg='🟠 '
    fi

    # Exit code of previous command
    test $exit_code -ne 0 && exit_symbol="💨"

    # Include git branch in prompt if git-prompt.sh is available.
    if [ -f $HOME/.git-prompt.sh ]; then
        source $HOME/.git-prompt.sh
        export GIT_PS1_SHOWCOLORHINTS=1
        git_prompt="${PURPLE}$(__git_ps1 '🌳 %s')${RESET_COLOR}"
    fi
    PS1="\n${jobs_in_bg}${dir}${git_prompt}\n${exit_symbol} "
}


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

test -f "$HOME/.cargo/env" && source "$HOME/.cargo/env"

test -d "$HOME/.local/bin" && PATH="$PATH:$HOME/.local/bin"

# test -x $HOME/.local/bin/starship && eval "$($HOME/.local/bin/starship init bash)"

if [ -x $HOME/.local/bin/bat ]; then
    export MANROFFOPT="-c"
    export MANPAGER="sh -c 'col -bx | bat --language  man --plain'"
fi

test -x "/opt/exercism/exercism" && PATH="$PATH:/opt/exercism"

test -x /usr/bin/broot && source $HOME/.config/broot/launcher/bash/br

